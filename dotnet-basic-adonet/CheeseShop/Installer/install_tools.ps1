<##########################################################################################################  General###########################################################################################################>function Copy-Build{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $BuildDir,				[Parameter(Position=1,Mandatory=$true)]		[string] $InstallDir	)	Write-Host "Copying build"	Copy-Item -Recurse "$BuildDir\*" -Destination $InstallDir}function Apply-Profile{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ProfileDir,				[Parameter(Position=1,Mandatory=$true)]		[string] $InstallDir	)		Copy-Item -Recurse -Force "$ProfileDir\*" -Destination $InstallDir}function Get-AvailableDeployments{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ProfilesDir	)		return Get-ChildItem -Path $ProfilesDir | Where-Object { $_.Attributes -eq "Directory" }}function Get-AvailableProfiles{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ProfilesDir,				[Parameter(Position=1,Mandatory=$true)]		[string] $Deployment	)		$profilesPath = Join-Path $ProfilesDir $Deployment	return Get-ChildItem -Path $profilesPath | Where-Object { $_.Attributes -eq "Directory" }}function Get-ValidatedDeployment{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ProfilesDir,				[Parameter(Position=1,Mandatory=$false)]		[string] $Deployment = ""	)		$availableDeployments = @( Get-AvailableDeployments $ProfilesDir )	$validatedDeployment = ""	if ($Deployment -eq "") {		if ($availableDeployments.Length -gt 1) {			Write-Host -ForegroundColor Red "You must specify a deployment. Valid deployments are: " ($availableDeployments -join ' ')			Exit 1			}					$validatedDeployment = $availableDeployments[0].Name	}	else {		$validDeployment = @( $availableDeployments | Where { $_.Name -eq $Deployment } )		if ($validDeployment.Length -ne 1) {			Write-Host -ForegroundColor Red "Deployment '" $deployment "' is not valid. Valid deployments are: " ($availableDeployments -join ' ')			Exit 1		}				$validatedDeployment = $Deployment	}		Return $validatedDeployment}function Get-ValidatedProfile{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ProfilesDir,				[Parameter(Position=1,Mandatory=$true)]		[string] $Deployment,				[Parameter(Position=2,Mandatory=$false)]		[string] $Profile = ""	)			$availableProfiles = @( Get-AvailableProfiles $ProfilesDir $Deployment )	$validatedProfile = ""		$validProfiles = @( $availableProfiles | Where { $_.Name -eq $Profile } )	if ($validProfiles.Length -ne 1) {		Write-Host -ForegroundColor Red "Profile '" $Profile "' is not valid. Valid profiles are: " ($availableProfiles -join ' ')		Exit 1	}		$validatedProfile = $Profile		Return $validatedProfile}function Get-BuildDir{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ScriptDir	)		return Join-Path $ScriptDir "build"}function Get-ProfilesDir{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ScriptDir	)		return Join-Path $ScriptDir "profiles"}function Get-ProfileDir{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ScriptDir,				[Parameter(Position=1,Mandatory=$true)]		[string] $Deployment,		[Parameter(Position=2,Mandatory=$true)]		[string] $Profile		)		return Join-Path ( Join-Path $ScriptDir $Deployment ) $Profile	}function Get-AssemblyVersion{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $PathName	)		Return (Get-Item $PathName).VersionInfo.FileVersion}function Exec{	[CmdletBinding()]	Param(		[Parameter(Position=0, Mandatory=$true)]		[ScriptBlock]		$cmd,				[Parameter(Position=1, Mandatory=$false)]		$errorMessage = ("Error Executing command {0}." -f $cmd)	)		& $cmd		if ($lastexitcode -ne 0) {		throw ("Exec: " + $errorMessage)	}}<##########################################################################################################  NServiceBus###########################################################################################################>[Reflection.Assembly]::LoadWithPartialName("System.Messaging") | Out-Null$LocalAdministratorGroupSID = 'S-1-5-32-544'$EveryoneGroupSID = 'S-1-1-0'$AnonymousLogonGroupSID = 'S-1-5-7'$appOfflineFileName = "app_offline.htm"$appOfflineTemplateFileName ="_$appOfflineFileName"function buildMessageQueueAccessRights([System.Messaging.MessageQueueAccessRights[]] $rights) {	$bitMask = 0	foreach ($right in $rights) {		$bitMask = $bitMask -bor $right	}		return $bitMask}function getOrCreateQueue([string] $queueName, [bool] $transactional) {	$queue = $null	if ([System.Messaging.MessageQueue]::Exists($queueName)) {		$queue = Get-MsmqQueue -Name $queueName	}	else {		Write-Host -NoNewline "Creating MSMQ queue: $queueName "		$queue = New-MsmqQueue -Name $queueName -Transactional				if ($queue -eq $null) {			Write-Host -ForegroundColor Red "[FAIL]"			throw "Unable to create queue $queueName"		}				Write-Host -ForegroundColor Green "[OK]"	}		return ,$queue 		<# See Get-MsmqQueue #>}function getServiceName([string] $installDir, [string] $endpointName, [string] $deployment){	$version = Get-AssemblyVersion "${installDir}\${endpointName}.dll"	$name = "${deployment}-${version}"		return $name}function getHostPathName([string] $installDir){	Return "${InstallDir}\NServiceBus.Host.exe"}function Get-FriendlyNameFromSID {	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $SID	)		$principal = New-Object System.Security.Principal.SecurityIdentifier $SID	$user = $principal.Translate([System.Security.Principal.NTAccount])	return $user.Value}function Get-MsmqQueue{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $Name	)	$queue = New-Object System.Messaging.MessageQueue $Name		<# 		Need to return ,$queue than returning $queue otherwise		the queue's messages are returned rather than the queue		itself as by default PowerShell enumerates any object		implementing IEnumerable.	#>	return ,$queue}function New-MsmqQueue{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $Name,				[switch] $Transactional	)	$queue = [System.Messaging.MessageQueue]::Create($Name, $Transactional) 	return ,$queue		<# See Get-MsmqQueue #>}function Set-MsmqQueueACL{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true,ValueFromPipeline=$true)]		[System.Messaging.MessageQueue] $InputObject,				[Parameter(Position=1,Mandatory=$true)]		[string[]] $UserName,				[Parameter(Position=2,Mandatory=$false)]		[System.Messaging.MessageQueueAccessRights[]] $Allow,				[Parameter(Position=3,Mandatory=$false)]		[System.Messaging.MessageQueueAccessRights[]] $Deny	)		foreach ($user in $UserName) {		$InputObject.SetPermissions($user, (buildMessageQueueAccessRights $Allow), [System.Messaging.AccessControlEntryType]::Allow) 		$InputObject.SetPermissions($user, (buildMessageQueueAccessRights $Deny), [System.Messaging.AccessControlEntryType]::Deny) 	}}function New-NSBEndpointQueues{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $EndpointName,				[switch] $Web,				[string] $AddDevPermissionsFor	)		$rootQueueName = ".\private$\$EndpointName"		$rootQueue = getOrCreateQueue($rootQueueName)	Set-MsmqQueueSetDefaultNSBACL $rootQueue -Web:$Web -AddDevPermissionsFor:$AddDevPermissionsFor		$retriesQueue = getOrCreateQueue("${rootQueueName}.retries")	Set-MsmqQueueSetDefaultNSBACL $retriesQueue -Web:$Web -AddDevPermissionsFor:$AddDevPermissionsFor		$timeoutsQueue = getOrCreateQueue("${rootQueueName}.timeouts")	Set-MsmqQueueSetDefaultNSBACL $timeoutsQueue -Web:$Web -AddDevPermissionsFor:$AddDevPermissionsFor		$timeoutsDispatcherQueue = getOrCreateQueue("${rootQueueName}.timeoutsdispatcher")	Set-MsmqQueueSetDefaultNSBACL $timeoutsDispatcherQueue -Web:$Web -AddDevPermissionsFor:$AddDevPermissionsFor}function Set-MsmqQueueSetDefaultNSBACL {	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true,ValueFromPipeline=$true)]		[System.Messaging.MessageQueue] $InputObject,				[switch] $Web,				[string] $AddDevPermissionsFor	)		Set-MsmqQueueACL $InputObject -UserName (Get-FriendlyNameFromSID $EveryoneGroupSID) -Allow GetQueueProperties, GetQueuePermissions, WriteMessage	Set-MsmqQueueACL $InputObject -UserName (Get-FriendlyNameFromSID $AnonymousLogonGroupSID) -Allow WriteMessage	Set-MsmqQueueACL $InputObject -UserName (Get-FriendlyNameFromSID $LocalAdministratorGroupSID) -Allow FullControl		if ($Web) {		Set-MsmqQueueACL $InputObject -UserName "IIS AppPool\DefaultAppPool" -Allow GetQueueProperties, GetQueuePermissions, WriteMessage, PeekMessage, ReceiveMessage	}		if ($AddDevPermissionsFor -ne $null -and $AddDevPermissionsFor -ne "") {		Set-MsmqQueueACL $InputObject -UserName $AddDevPermissionsFor -Allow FullControl	}}function Install-NSBService{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $InstallDir,		[Parameter(Position=1,Mandatory=$true)]		[string] $EndpointName,		[Parameter(Position=2,Mandatory=$true)]		[string] $Deployment,		[Parameter(Position=3,Mandatory=$true)]		[string] $Profile	)		$hostPathName = getHostPathName $InstallDir	$name = getServiceName $InstallDir $EndpointName $Deployment	$nsbProfile = ""		if ($Profile -ne "LOCAL") {		$nsbProfile = "NServiceBus.Production"	}	Exec { & $hostPathName /install /DisplayName:$name /ServiceName:$EndpointName $nsbProfile }}function Uninstall-NSBService{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $InstallDir,		[Parameter(Position=1,Mandatory=$true)]		[string] $EndpointName,		[Parameter(Position=2,Mandatory=$true)]		[string] $Deployment	)		$hostPathName = getHostPathName $InstallDir	$name = getServiceName $InstallDir $EndpointName $Deployment	Exec { & $hostPathName /uninstall /DisplayName:$name /ServiceName:$EndpointName }}<##########################################################################################################  WebSite###########################################################################################################>function Remove-WebSite{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $InstallDir	)		foreach ($directory in Get-ChildItem -Path $InstallDir | Where-Object { $_.Attributes -eq "Directory" })	{		Remove-Item -Force -Recurse $directory.FullName	}		foreach ($file in Get-ChildItem -Path $InstallDir | 		Where-Object { $_.Attributes -ne "Directory" -and $_.Name -ne "web.config" -and $_.Name -ne "global.asax" -and $_.Name -ne "_AppOffline.htm" -and $_.Name -ne "AppOffline.htm" })	{		Remove-Item -Force $file.FullName	}	}function Enable-MaintenancePage{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $ProfileDir,				[Parameter(Position=1,Mandatory=$true)]		[string] $InstallDir	)	Write-Host -NoNewline "Enabling maintenance page "		try {		$installedTemplate = Join-Path $InstallDir $appOfflineTemplateFileName		$appOfflinePathName = Join-Path $InstallDir $appOfflineFileName		Copy-Item $installedTemplate $appOfflinePathName | Out-Null		Write-Host -ForegroundColor Green "OK"	}	catch {		Write-Host -ForegroundColor Red "FAIL"		throw	}}function Disable-MaintenancePage{	[CmdletBinding()]	Param(		[Parameter(Position=0,Mandatory=$true)]		[string] $InstallDir	)	Write-Host -NoNewline "Disabling maintenance page "		try {		$appOfflinePathName = Join-Path $InstallDir $appOfflineFileName		Remove-Item $appOfflinePathName | Out-Null	}	catch {		Write-Host -ForegroundColor Red "FAIL"		throw	}	Write-Host -ForegroundColor Green "OK"}